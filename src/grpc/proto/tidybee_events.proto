syntax = "proto3";

import "google/protobuf/timestamp.proto";

option optimize_for = SPEED;

package tidybee_events;

// General status enum
enum Status {
    OK = 0;
    ERROR = 1;
}

// Request to create a file info
// The main difference between FileInfoCreateRequest and FileInfoUpdateRequest is that all fields are required in FileInfoCreateRequest
message FileInfoCreateRequest {
    // Path relative to the watched directory
    string pretty_path = 1;
    // Full canonical path
    string path = 2;
    // File size in bytes
    uint64 size = 3;
    // xxhash64 hash of the file content
    string hash = 4;
    // Last modified timestamp
    google.protobuf.Timestamp last_modified = 5;
    // Last accessed timestamp
    google.protobuf.Timestamp last_accessed = 6;
}

// Request to update file content
message FileInfoUpdateRequest {
    // Path relative to the watched directory
    string pretty_path = 1;
    // Full canonical path
    string path = 2;
    // File size in bytes
    optional uint64 size = 3;
    // xxhash64 hash of the file content
    optional string hash = 4;
    // Last modified timestamp
    optional google.protobuf.Timestamp last_modified = 5;
    // Last accessed timestamp
    optional google.protobuf.Timestamp last_accessed = 6;
}

// Request to delete a file
message FileInfoDeleteRequest {
    // Path relative to the watched directory
    string pretty_path = 1;
    // Full canonical path
    string path = 2;
}

// Data sent by the agent when connecting to the hub
message AgentData {
    // Agent version
    string agent_version = 1;
    // Machine name (usually the hostname)
    string machine_name = 2;
    // Process ID of the agent
    uint32 process_id = 3;
    // Uptime of the machine in seconds
    uint64 uptime = 4;
    // List of directories watched by the agent
    repeated string watched_directories = 5;
}

// Response to a file update request
message FileInfoUpdateResponse {
    // Status of the operation
    Status status = 1;
}

service TidyBeeEvents {
    // Ask the hub to create a new file info
    rpc CreateFileInfo(stream FileInfoCreateRequest) returns (FileInfoUpdateResponse);
    // Ask the hub to update the file info
    rpc UpdateFileInfo(stream FileInfoUpdateRequest) returns (FileInfoUpdateResponse);
    // Ask the hub to delete the file from its database
    rpc DeleteFileInfo(stream FileInfoDeleteRequest) returns (FileInfoUpdateResponse);
}